{"version":3,"sources":["components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","Fragment","className","concat","mode","href","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","onClick","toggleMode","role","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","value","style","color","backgroundColor","onChange","event","target","rows","newText","toUpperCase","toLowerCase","split","i","length","charAt","slice","join","match","filter","element","replace","App","setMode","document","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.58a91a93.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <>\r\n    <nav className={`navbar navbar-expand-lg fw-bold navbar-${props.mode} bg-${props.mode} text-${props.mode==='dark'?'light':'dark'} `}>\r\n    <div className=\"container-fluid\">\r\n      <a className=\"navbar-brand\" href=\"/\">Text Utils</a>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n        <ul className=\"navbar-nav\">\r\n         \r\n        </ul>\r\n      </div>\r\n        <div className=\"form-check form-switch\">\r\n        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.mode==='dark'?'Light':'Dark'} Mode</label>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n  </>\r\n  )\r\n}\r\n","import React, { useState } from \"react\";\r\nexport default function TextForm(props) {\r\n  const [text, setText] = useState(\"\");\r\n  const handleOnchange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n  const toUp = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n  };\r\n  const toLow = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n  };\r\n  const toCap = () => {\r\n    let newText = text.toLowerCase();\r\n    newText = newText.split(\" \");\r\n    for (var i = 0; i < newText.length; i++) {\r\n      newText[i] = newText[i].charAt(0).toUpperCase() + newText[i].slice(1);\r\n    }\r\n    newText = newText.join(\" \");\r\n    setText(newText);\r\n  };\r\n  const toEE = () => {\r\n    let newText = text.match(\r\n      /([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9_-]+)/gi\r\n    );\r\n    setText(newText.join(\"\\n\"));\r\n  };\r\n  return (\r\n    <div className=\"mt-3\">\r\n      <h3 htmlFor=\"myBox\" className={`form-label text-${props.mode==='dark'?'light':'dark'} `} >\r\n        TextArea\r\n      </h3>\r\n      <textarea\r\n        className={`form-control mt-3`}\r\n        value={text}\r\n        style={{color: props.mode==='dark'?'white':'black', backgroundColor: props.mode==='dark'?'grey':'white'}}\r\n        onChange={handleOnchange}\r\n        id=\"myBox\"\r\n        rows=\"8\"\r\n      ></textarea>\r\n      <button type=\"button\" onClick={toUp} className=\"btn btn-primary mt-2\">\r\n        UpperCase\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        onClick={toLow}\r\n        className=\"btn btn-primary mt-2 ms-1\"\r\n      >\r\n        LowerCase\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        onClick={toCap}\r\n        className=\"btn btn-primary mt-2 ms-1\"\r\n      >\r\n        Capitalize First Character\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        onClick={toEE}\r\n        className=\"btn btn-primary mt-2 ms-1\"\r\n      >\r\n        Extract Emails\r\n      </button>\r\n      <h3 className={`mt-4 text-${props.mode==='dark'?'light':'dark'}`}>Your Text Summary</h3>\r\n      <h5 className={`mt-2 text-${props.mode==='dark'?'light':'dark'}`}>Word Count : {text.split(\" \").filter((element)=>{return element.length !==0;}).length}</h5>\r\n      <h5 className={`mt-2 text-${props.mode==='dark'?'light':'dark'}`}>Character Count : {text.replace(/\\s/g, \"\").length}</h5>\r\n      <h5 className={`mt-2 text-${props.mode==='dark'?'light':'dark'}`}>Preview</h5>\r\n      <h6 className={`mt-2 text-${props.mode==='dark'?'light':'dark'}`}>{text}</h6>\r\n    </div>\r\n  );\r\n}\r\n","import React ,{ useState } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nfunction App() {\n  const [mode , setMode]=useState('light');\n   const showMode = () => {\n    if(mode=== \"light\"){\n      setMode(\"dark\");\n      document.body.style.backgroundColor = '#212529';\n    }\n    else{\n      setMode(\"light\");\n      document.body.style.backgroundColor ='white';\n    }\n  }\n  return (\n    <>\n    <Navbar mode={mode} toggleMode={showMode}/>\n    <div className=\"container\">\n      <TextForm mode={mode}/>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}